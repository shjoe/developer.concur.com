{
  "host": "us.api.concursolutions.com",
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json",
    "application/scim+json"
  ],
  "basePath": "/profile/identity/",
  "securityDefinitions": {
    "ApiKeyAuth": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "consumes": [
    "application/json",
    "application/scim+json"
  ],
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "paths": {
    "/v4/Users/{id}/": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Replace User Identity",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/User"
            },
            "description": "successful updation of user identity"
          },
          "default": {
            "description": "error updating user identity",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "description": "user's uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            },
            "in": "body",
            "name": "user",
            "description": "the user identity to update"
          }
        ]
      },
      "get": {
        "summary": "Fetch User Identity",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched User Identity",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "error fetching user identity",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "description": "user's uuid",
            "name": "id",
            "type": "string",
            "required": true
          }
        ]
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Patch User Identity",
        "parameters": [
          {
            "required": true,
            "type": "string",
            "in": "path",
            "description": "user's uuid",
            "name": "id"
          },
          {
            "schema": {
              "type": "object",
              "description": "https://tools.ietf.org/html/rfc7644#section-3.5.2"
            },
            "required": true,
            "name": "patch operations",
            "description": "patch operations to apply on the user identity",
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/User"
            },
            "description": "Successfully patched User Identity"
          },
          "default": {
            "description": "Error patching user identity",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },


    "/v4/Users": {
      "post": {
        "summary": "Create User Identity",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "created User Identity",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "error creating user identity",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "description": "the user identity to create",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            },
            "required": true
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "name": "filter",
            "description": "The filter string used to request a subset of resources",
            "in": "query",
            "type": "string",
            "required": false
          },
          {
            "name": "attributes",
            "description": "A multi-valued list of strings indicating the names of resource attributes to return in the response",
            "in": "query",
            "type": "string",
            "required": false
          },
          {
            "name": "excludedAttributes",
            "description": "A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return",
            "in": "query",
            "type": "string",
            "required": false
          },
          {
            "name": "startIndex",
            "description": "The 1-based index of the first query result",
            "in": "query",
            "type": "integer",
            "required": false
          },
          {
            "name": "count",
            "description": "The desired maximum number of query results per page",
            "in": "query",
            "type": "integer",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/UserList"
            },
            "description": "successfully fetched user identities"
          },
          "default": {
            "description": "Error fetching user identity",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "User"
        ],
        "summary": "Lookup User(s) for Company"
      }
    },
    "/v4/Schemas/": {
      "get": {
        "responses": {
          "200": {
            "description": "All supported schemas"
          },
          "default": {
            "description": "error fetching schemas",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "Schema"
        ],
        "summary": "Get all schemas"
      }
    },
    "/v4/Schemas/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Successfully fetched schema"
          },
          "default": {
            "description": "error fetching schema",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "enum": [
              "com:concur:cte:user:2.0",
              "com:concur:cte:company:2.0"
            ],
            "description": "schema id",
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "Schema"
        ],
        "summary": "Get Schema"
      }
    },
    "/v4/ServiceProviderConfig": {
      "get": {
        "description": "Queries service provider configurations.",
        "operationId": "getServiceProviderConfig",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ServiceProviderConfig"
            }
          },
          "403": {
            "description": "Invalid token passed"
          },
          "502": {
            "description": "Authentication or account gateway error occurred"
          },
          "504": {
            "description": "Authentication or account gateway timeout occurred"
          }
        },
        "summary": "Get Service Provider Configurations",
        "tags": [
          "Schema"
        ]
      }
    },
    "/v4/ResourceTypes": {
      "get": {
        "description": "Queries service provider resource types.",
        "operationId": "getServiceProviderResourceTypes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "403": {
            "description": "Invalid token passed"
          },
          "502": {
            "description": "Authentication or account gateway error occurred"
          },
          "504": {
            "description": "Authentication or account gateway timeout occurred"
          }
        },
        "summary": "Get Service Provider Configurations",
        "tags": [
          "Schema"
        ]
      }
    }
  },
  "info": {
    "contact": {
      "email": "profile@concur.com"
    },
    "version": "v4",
    "description": "Identity APIs",
    "license": {
      "name": "Concur",
      "url": "https://developer.concur.com/Terms-of-Use.html"
    },
    "title": "Identity APIs",
    "termsOfService": "http://us.api.concursolutions.com/terms"
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "A Boolean value indicating whether the User is active."
        },
        "addresses": {
          "type": "array",
          "description": "A physical mailing address for this User. Canonical type values of 'work', 'home', and 'other'. This attribute is a complex type with the following sub-attributes.",
          "items": {
            "type": "object",
            "properties": {
              "country": {
                "type": "string",
                "description": "A two-letter country code defined in ISO 3166-1 alpha-2"
              },
              "locality": {
                "type": "string",
                "description": "The city or locality."
              },
              "postalCode": {
                "type": "string",
                "description": "The zip code or postal code."
              },
              "region": {
                "type": "string",
                "description": "The state or region."
              },
              "streetAddress": {
                "type": "string",
                "description": "The full street address component, which may include house number, street name, P.O. box, and multi-line extended street address information.  This attribute MAY contain newlines."
              },
              "type": {
                "type": "string",
                "description": "A label indicating the function of the address, e.g., 'work' or 'home'.",
                "enum": [
                  "work",
                  "home",
                  "other",
                  "billing",
                  "bank",
                  "shipping"
                ]
              }
            }
          }
        },
        "dateOfBirth": {
          "type": "string",
          "description": "The user's date of birth , in YYYY-MM-DD format"
        },
        "displayName": {
          "type": "string",
          "description": "The name of the User, suitable for display to end-users."
        },
        "emails": {
          "type": "array",
          "description": "Email addresses for the user. The value SHOULD be canonicalized by the service provider, e.g., 'bjensen@example.com' instead of 'bjensen@EXAMPLE.COM'. Canonical type values of 'work', 'home', and 'other'.",
          "items": {
            "type": "object",
            "properties": {
              "dateAdded": {
                "type": "string",
                "description": "The date and time the email was added to the user's profile."
              },
              "dateVerified": {
                "type": "string",
                "description": "The date and time the email was verified"
              },
              "notifications": {
                "type": "boolean",
                "description": "Notifications opt-in for emails"
              },
              "type": {
                "type": "string",
                "description": "A label indicating the attribute's function, e.g., 'Work' or 'Home'.",
                "enum": [
                  "work",
                  "home",
                  "other",
                  "other2",
                  "work2",
                  "sms"
                ]
              },
              "value": {
                "type": "string",
                "description": "Email address value"
              },
              "verified": {
                "type": "boolean",
                "description": "flag to note which email has been verified by the user."
              }
            },
            "required": [
              "value"
            ]
          }
        },
        "emergencyContacts": {
          "type": "array",
          "description": "Emergency Contact information for the User.",
          "items": {
            "type": "object",
            "properties": {
              "country": {
                "type": "string",
                "description": "A two-letter country code defined in ISO 3166-1 alpha-2"
              },
              "emails": {
                "type": "array",
                "description": "Emails of the contact",
                "items": {
                  "type": "string"
                }
              },
              "locality": {
                "type": "string",
                "description": "The city or locality."
              },
              "name": {
                "type": "string",
                "description": "Contact name."
              },
              "phones": {
                "type": "array",
                "description": "Phone numbers of the contact",
                "items": {
                  "type": "string"
                }
              },
              "postalCode": {
                "type": "string",
                "description": "The zip code or postal code."
              },
              "region": {
                "type": "string",
                "description": "The state or region."
              },
              "relationship": {
                "type": "string",
                "description": "Emergency contact relationship.",
                "enum": [
                  "Spouse",
                  "Brother",
                  "Parent",
                  "Sister",
                  "Life Partner",
                  "Other"
                ]
              },
              "streetAddress": {
                "type": "string",
                "description": "The full street address component, which may include house number, street name, P.O. box, and multi-line extended street address information.  This attribute MAY contain newlines."
              }
            },
            "required": [
              "name",
              "relationship"
            ]
          }
        },
        "entitlements": {
          "type": "array",
          "description": "The features enabled for the user",
          "items": {
            "type": "string",
            "enum": [
              "Expense",
              "Invoice",
              "Locate",
              "Request",
              "Travel"
            ]
          }
        },
        "externalId": {
          "type": "string",
          "description": "User identifier from the provisioning client"
        },
        "gender": {
          "type": "string",
          "description": "The user's gender",
          "enum": [
            "Male",
            "Female",
            "Others"
          ]
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for the user - a uuid"
        },
        "localeOverrides": {
          "type": "object",
          "description": "Support for users who want to override locale settings",
          "properties": {
            "preference24Hour": {
              "type": "string",
              "description": "preferred 24 hour format for the user",
              "enum": [
                "h:mm AM/PM",
                "H:mm"
              ]
            },
            "preferenceCurrencySymbolLocation": {
              "type": "string",
              "description": "preferred currency symbol location for the user",
              "enum": [
                "BeforeAmount",
                "AfterAmount"
              ]
            },
            "preferenceDateFormat": {
              "type": "string",
              "description": "preferred date format for the user",
              "enum": [
                "mm/dd/yyyy",
                "mm.dd.yyyy",
                "mm-dd-yyyy",
                "dd/mm/yyyy",
                "dd.mm.yyyy",
                "dd-mm-yyyy",
                "yyyy/mm/dd",
                "yyyy.mm.dd",
                "yyyy-mm-dd"
              ]
            },
            "preferenceDefaultCalView": {
              "type": "string",
              "description": "preferred default calendar view for the user",
              "enum": [
                "day",
                "week",
                "month"
              ]
            },
            "preferenceDistance": {
              "type": "string",
              "description": "preferred distance metric",
              "enum": [
                "mile",
                "km"
              ]
            },
            "preferenceEndDayViewHour": {
              "type": "integer",
              "description": "preferred hour setting for the end of day, 0-23"
            },
            "preferenceFirstDayOfWeek": {
              "type": "string",
              "description": "preferred first day of the week for the user",
              "enum": [
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday",
                "Sunday"
              ]
            },
            "preferenceHourMinuteSeparator": {
              "type": "string",
              "description": "preferred separator between hour and minute",
              "enum": [
                ":",
                "."
              ]
            },
            "preferenceNegativeCurrencyFormat": {
              "type": "string",
              "description": "preferred negative currency format for the user",
              "enum": [
                "-100",
                "(100)"
              ]
            },
            "preferenceNegativeNumberFormat": {
              "type": "string",
              "description": "preferred negative number format for the user",
              "enum": [
                "-100",
                "(100)"
              ]
            },
            "preferenceNumberFormat": {
              "type": "string",
              "description": "preferred number format for the user",
              "enum": [
                "1,000.00",
                "1.000,00",
                "1 000,00",
                "1'000.00",
                "1'000,00"
              ]
            },
            "preferenceStartDayViewHour": {
              "type": "integer",
              "description": "preferred start of day for the user, from 1"
            }
          }
        },
        "meta": {
          "type": "object",
          "description": ""
        },
        "name": {
          "type": "object",
          "description": "The user's name",
          "properties": {
            "academicTitle": {
              "type": "array",
              "description": "Title signifying level of academic achievement",
              "items": {
                "type": "string",
                "enum": [
                  "Dr.",
                  "Doctor",
                  "Prof.",
                  "Professor"
                ]
              }
            },
            "familyName": {
              "type": "string",
              "description": "The family name of the User, or last name in most Western languages (e.g., 'Jensen' given the full name 'Ms. Barbara J Jensen, III')."
            },
            "familyNamePrefix": {
              "type": "string",
              "description": "The family name prefix of the User (e.g. 'van' given the full name 'Vincent van Gogh')"
            },
            "formatted": {
              "type": "string",
              "description": "The full name, formatted for display (e.g., 'Jensen, Barbara Jane')."
            },
            "givenName": {
              "type": "string",
              "description": "The given name of the User, or first name in most Western languages (e.g., 'Barbara' given the full name 'Ms. Barbara J Jensen, III')."
            },
            "hasNoMiddleName": {
              "type": "boolean",
              "description": "A boolean indicating that the user does not have a middle name"
            },
            "honorificPrefix": {
              "type": "string",
              "description": "The honorific prefix(es) of the User, or title in most Western languages (e.g., 'Ms.' given the full name 'Ms. Barbara J Jensen, III').",
              "enum": [
                "Miss",
                "Mr",
                "Mrs",
                "Ms",
                "Mx",
                "B.A.",
                "B.Sc.",
                "CPA",
                "D.D.",
                "D.D.S.",
                "D.P.S.",
                "Dr",
                "Dr Mr",
                "Dr Mrs",
                "Dr Ms",
                "Eng.",
                "Ing.",
                "Lady",
                "Lord",
                "M.D.",
                "MBA",
                "P.Eng.",
                "Ph.D",
                "Ph.D.",
                "Prof",
                "Prof Dr",
                "Prof Dr Mr",
                "Prof Dr Mrs",
                "Prof Dr Ms",
                "Prof Mr",
                "Prof Mrs",
                "Prof Ms",
                "Rev",
                "Sir"
              ]
            },
            "honorificSuffix": {
              "type": "string",
              "description": "The honorific suffix(es) of the User, or  suffix in most Western languages (e.g., 'III' given the full name  'Ms. Barbara J Jensen, III').",
              "enum": [
                "Jr.",
                "Sr.",
                "I",
                "II",
                "III",
                "IV",
                "V",
                "VI"
              ]
            },
            "legalName": {
              "type": "string",
              "description": "The legal name of the User (e.g., 'Jane' given the full name 'Ms. Barbara J Jensen, III')."
            },
            "middleInitial": {
              "type": "string",
              "description": "middle initial, if the user has a middle name"
            },
            "middleName": {
              "type": "string",
              "description": "The middle name(s) of the User (e.g., 'Jane' given the full name 'Ms. Barbara J Jensen, III')."
            }
          },
          "required": [
            "familyName",
            "givenName"
          ]
        },
        "nickName": {
          "type": "string",
          "description": "The casual way to address the user in real  life, e.g., 'Bob' or 'Bobby' instead of 'Robert'.  This attribute  SHOULD NOT be used to represent a User's username (e.g., 'bjensen' or  'mpepperidge')."
        },
        "phoneNumbers": {
          "type": "array",
          "description": "Phone numbers for the User.  The value SHOULD be canonicalized by the service provider according to the format specified in RFC 3966, e.g., 'tel:+1-201-555-0123'. Canonical type values of 'work', 'home', 'mobile', 'fax', 'pager', and 'other'.",
          "items": {
            "type": "object",
            "properties": {
              "display": {
                "type": "string",
                "description": "A human-readable phone number for display"
              },
              "notifications": {
                "type": "boolean",
                "description": "LNA Opt-in for mobile devices (type=Mobile)"
              },
              "operatingSystem": {
                "type": "string",
                "description": "The OS of the  device, when the phone is a cellphone type",
                "enum": [
                  "Android Phone",
                  "Android Tablet",
                  "Blackberry",
                  "iOS Phone",
                  "iOS Tablet",
                  "Not a smartphone",
                  "Other iOS device",
                  "Other smartphone",
                  "Unknown",
                  "Window Mobile"
                ]
              },
              "primary": {
                "type": "boolean",
                "description": "Primary device for mobile devices (type=Mobile)"
              },
              "type": {
                "type": "string",
                "description": "A label indicating the attribute's function, e.g., 'Work', 'Home'.",
                "enum": [
                  "work",
                  "home",
                  "mobile",
                  "fax",
                  "pager",
                  "other",
                  "work2"
                ]
              },
              "value": {
                "type": "string",
                "description": "Phone number value. Attempts to format to RFC3966 standards on create/update"
              }
            }
          }
        },
        "preferredLanguage": {
          "type": "string",
          "description": "Indicates the User's preferred written or spoken language.  Generally used for selecting a localized user interface"
        },
        "schemas": {
          "type": "array",
          "description": "",
          "items": {
            "type": "string",
            "enum": [
              "urn:ietf:params:scim:schemas:core:2.0:User",
              "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User"
            ]
          }
        },
        "timezone": {
          "type": "string",
          "description": "The User's time zone in the 'Olson' time zone database format, e.g., 'America/Los_Angeles'."
        },
        "title": {
          "type": "string",
          "description": "user's job title in the company"
        },
        "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
          "type": "object",
          "description": "",
          "properties": {
            "companyId": {
              "type": "string",
              "description": "Concur ID of the company"
            },
            "costCenter": {
              "type": "string",
              "description": "employee cost center for product"
            },
            "department": {
              "type": "string",
              "description": "Client supplied department name"
            },
            "division": {
              "type": "string",
              "description": "Client supplied division name"
            },
            "employeeNumber": {
              "type": "string",
              "description": "Client supplied employee's number within the company, unique for the company"
            },
            "manager": {
              "type": "object",
              "description": "The manager of this user",
              "properties": {
                "$ref": {
                  "type": "string",
                  "description": "The URI of the SCIM resource representing the referenced user."
                },
                "displayName": {
                  "type": "string",
                  "description": "The referenced user's display name"
                },
                "employeeNumber": {
                  "type": "string",
                  "description": "The referenced user's employee number, if it is an Enterprise user"
                },
                "value": {
                  "type": "string",
                  "description": "The referenced user's UUID"
                }
              }
            },
            "orgUnit": {
              "type": "string",
              "description": "Client supplied org unit name"
            },
            "organization": {
              "type": "string",
              "description": "Company name"
            },
            "self": {
              "type": "object",
              "description": "A reference to this user",
              "properties": {
                "$ref": {
                  "type": "string",
                  "description": "The URI of the SCIM resource representing the referenced user."
                },
                "displayName": {
                  "type": "string",
                  "description": "The referenced user's display name"
                },
                "employeeNumber": {
                  "type": "string",
                  "description": "The referenced user's employee number, if it is an Enterprise user"
                },
                "value": {
                  "type": "string",
                  "description": "The referenced user's UUID"
                }
              }
            },
            "startDate": {
              "type": "string",
              "description": "Start Date, in YYYY-MM-DD format"
            },
            "terminationDate": {
              "type": "string",
              "description": "Termination Date, in YYYY-MM-DD format, if the employee is terminated, this can also be used to calculate the data retention period"
            }
          },
          "required": [
            "companyId"
          ]
        },
        "userName": {
          "type": "string",
          "description": "The name that can be used to login to CTE"
        }
      },
      "required": [
        "name",
        "active",
        "id",
        "emails",
        "userName",
        "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User"
      ]
    },
    "UserList": {
      "type": "object",
      "properties": {
        "totalResults": {
          "type": "integer",
          "description": "The total number of results matching the client query"
        },
        "itemsPerPage": {
          "type": "integer",
          "description": "The number of query results returned in a query response page"
        },
        "startIndex": {
          "type": "integer",
          "description": "The 1-based index of the first result in the current set of query results"
        },
        "schemas": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "urn:ietf:params:scim:api:messages:2.0:ListResponse"
            ]
          }
        },
        "Resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      }
    },
    "Company": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "A Boolean value indicating whether the company is active."
        },
        "addresses": {
          "type": "array",
          "description": "",
          "items": {
            "type": "object",
            "properties": {
              "country": {
                "type": "string",
                "description": "A two-letter country code defined in ISO 3166-1 alpha-2"
              },
              "locality": {
                "type": "string",
                "description": "The city or locality."
              },
              "postalCode": {
                "type": "string",
                "description": "The zip code or postal code."
              },
              "region": {
                "type": "string",
                "description": "The state or region."
              },
              "streetAddress": {
                "type": "string",
                "description": "The full street address component, which may include house number, street name, P.O. box, and multi-line extended street address information.  This attribute MAY contain newlines."
              }
            }
          }
        },
        "companyDomain": {
          "type": "string",
          "description": "The company's company domain name"
        },
        "contact": {
          "type": "object",
          "description": "",
          "properties": {
            "country": {
              "type": "string",
              "description": "A two-letter country code defined in ISO 3166-1 alpha-2"
            },
            "emails": {
              "type": "array",
              "description": "Emails of the contact",
              "items": {
                "type": "string"
              }
            },
            "locality": {
              "type": "string",
              "description": "The city or locality."
            },
            "name": {
              "type": "string",
              "description": "Contact name."
            },
            "phones": {
              "type": "array",
              "description": "Phone numbers of the contact",
              "items": {
                "type": "string"
              }
            },
            "postalCode": {
              "type": "string",
              "description": "The zip code or postal code."
            },
            "region": {
              "type": "string",
              "description": "The state or region."
            },
            "streetAddress": {
              "type": "string",
              "description": "The full street address component, which may include house number, street name, P.O. box, and multi-line extended street address information.  This attribute MAY contain newlines."
            }
          },
          "required": [
            "name"
          ]
        },
        "defaultLanguage": {
          "type": "string",
          "description": "Indicates the default language for the company."
        },
        "entitlements": {
          "type": "array",
          "description": "The features enabled for the company",
          "items": {
            "type": "string",
            "enum": [
              "Expense",
              "Invoice",
              "Locate",
              "Request",
              "Travel"
            ]
          }
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for the company - a uuid"
        },
        "internetDomain": {
          "type": "string",
          "description": "The company's internet domain name"
        },
        "meta": {
          "type": "object",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "The name of the company"
        },
        "schemas": {
          "type": "array",
          "description": "",
          "items": {
            "type": "string"
          }
        },
        "urn:ietf:params:scim:schemas:extension:authentication:2.0:Company": {
          "type": "object",
          "description": "",
          "properties": {
            "loginPolicy": {
              "type": "object",
              "description": "",
              "properties": {
                "hideForgotLoginIdLink": {
                  "type": "boolean",
                  "description": "Hide Forgot LoginId Link"
                },
                "loginFailureLockoutDuration": {
                  "type": "integer",
                  "description": "Login Failure Lockout Duration"
                },
                "loginFailureWindowDuration": {
                  "type": "integer",
                  "description": "Login Failure Window Duration"
                },
                "loginFailuresAllowed": {
                  "type": "integer",
                  "description": "Login Failures Allowed"
                },
                "loginIPRestriction": {
                  "type": "string",
                  "description": "login IP Restriction"
                },
                "loginOneTimeLinkExpirationLength": {
                  "type": "integer",
                  "description": "Login One Time Link Expiration Length"
                },
                "loginViaSsoOnly": {
                  "type": "boolean",
                  "description": "login Via SSO Only"
                }
              }
            },
            "passwordPolicy": {
              "type": "object",
              "description": "",
              "properties": {
                "daysUntilExpiration": {
                  "type": "integer",
                  "description": "Number of days Until expiration"
                },
                "expirePasswordOnUserCreation": {
                  "type": "boolean",
                  "description": "Expire Password On User Creation"
                },
                "maxLength": {
                  "type": "integer",
                  "description": "Maximum length"
                },
                "minLength": {
                  "type": "integer",
                  "description": "Minimum length"
                },
                "mobileAuthenticationLifetime": {
                  "type": "integer",
                  "description": "Mobile session timeout in seconds"
                },
                "mobileMinLength": {
                  "type": "integer",
                  "description": "Min Length for Mobile"
                },
                "mobileRequiresMixedCase": {
                  "type": "boolean",
                  "description": "Require mixed cases for Mobile"
                },
                "mobileRequiresNonalphanum": {
                  "type": "boolean",
                  "description": "Require None alpha numberic for Mobile"
                },
                "numGenerationsBeforeCanReuse": {
                  "type": "integer",
                  "description": "Number of Generations Before the password can be reused"
                },
                "numSecurityQuestions": {
                  "type": "integer",
                  "description": "Number of security questions"
                },
                "numSecurityQuestionsUsersPick": {
                  "type": "integer",
                  "description": "Number of security questions users can pick"
                },
                "passwordResetEmailPolicy": {
                  "type": "string",
                  "description": "When should password reset password email shall be sent",
                  "enum": [
                    "never",
                    "anyTime",
                    "afterFirstLogin"
                  ]
                },
                "passwordResetSupportEmail": {
                  "type": "string",
                  "description": "The FROM address of the password or PIN reset email"
                },
                "requiresMixedCase": {
                  "type": "boolean",
                  "description": "Require mixed cases"
                },
                "requiresNonAlpha": {
                  "type": "boolean",
                  "description": "Requires NonAlpha"
                },
                "requiresNonAlphanum": {
                  "type": "boolean",
                  "description": "Requires NonAlphaNum"
                },
                "requiresNumber": {
                  "type": "boolean",
                  "description": "Require numbers"
                },
                "requiresSecurityQuestions": {
                  "type": "boolean",
                  "description": "Require security questions"
                },
                "restrictPasswordResetOncePerDay": {
                  "type": "boolean",
                  "description": "restrict Password Reset Once Per Day"
                }
              }
            }
          }
        },
        "urn:ietf:params:scim:schemas:extension:notification:2.0:Company": {
          "type": "object",
          "description": "",
          "properties": {
            "channels": {
              "type": "array",
              "description": "",
              "items": {
                "type": "string",
                "enum": [
                  "Slack",
                  "SMS",
                  "Email",
                  "Push"
                ]
              }
            },
            "enabled": {
              "type": "boolean",
              "description": ""
            }
          }
        },
        "urn:ietf:params:scim:schemas:extension:sap:2.0:Company": {
          "type": "object",
          "description": "",
          "properties": {
            "tenantIdSpend": {
              "type": "string",
              "description": "Spend tenant ID for the company"
            },
            "tenantIdTravel": {
              "type": "string",
              "description": "Travel tenant ID for the company"
            }
          }
        }
      },
      "required": [
        "active",
        "id"
      ]
    },
    "ConcurError": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "array",
          "description": "Additional messages in case of errors / warnings",
          "items": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Message Code"
              },
              "message": {
                "type": "string",
                "description": "Message description"
              },
              "schemaPath": {
                "type": "string",
                "description": "Relative schema path of attribute"
              },
              "type": {
                "type": "string",
                "description": "Message Type",
                "enum": [
                  "error",
                  "warning"
                ]
              }
            },
            "required": [
              "code",
              "type"
            ]
          }
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "scimType": {
          "type": "string",
          "description": "SCIM detail error keyword"
        },
        "detail": {
          "type": "string",
          "description": "Human readable message"
        },
        "status": {
          "type": "string",
          "description": "HTTP status code"
        },
        "urn:ietf:params:scim:api:messages:concur:2.0:Error": {
          "type": "object",
          "$ref": "#/definitions/ConcurError",
          "description": "Concur custom error"
        }
      },
      "required": [
        "status"
      ]
    },
    "SchemaExtension": {
      "description": "Describes an extension of a schema",
      "properties": {
        "schema": {
          "description": "The string identifier of the extension",
          "type": "string"
        },
        "required": {
          "description": "Whether this existention is a required part of the schema",
          "type": "boolean"
        }
      },
      "required": [
        "schema",
        "required"
      ]
    },
    "ResourceType": {
      "description": "Describes the extension and metadata constituting a resource like a user.",
      "properties": {
        "attributes": {
          "description": "The resource's extensions",
          "items": {
            "$ref": "#/definitions/SchemaExtension"
          },
          "type": "array"
        },
        "description": {
          "description": "The resource's description",
          "type": "string"
        },
        "endpoint": {
          "description": "The resource's HTTP addressable endpoint relative to the base URL, e.g. /Users.",
          "type": "string"
        },
        "id": {
          "description": "The resource's id, e.g. urn:scim:schemas:core:1.0:User",
          "type": "string"
        },
        "name": {
          "description": "The resource's name, e.g. \"User\"",
          "type": "string"
        },
        "schema": {
          "description": "The resource's associated schema, e.g. urn:scim:schemas:core:1.0",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "schema",
        "endpoint",
        "attributes"
      ]
    },
    "AuthenticationSchemes": {
      "description": "Specifies supported Authentication Scheme properties",
      "properties": {
        "description": {
          "description": "The description of the Authentication Scheme",
          "type": "string"
        },
        "documentationUrl": {
          "description": "A HTTP addressable URL pointing to the Authentication Scheme's usage documentation",
          "type": "string"
        },
        "name": {
          "description": "The common authentication scheme name, e.g. HTTP Basic",
          "type": "string"
        },
        "specUrl": {
          "description": "A HTTP addressable URL pointing to the Authentication Scheme's specification",
          "type": "string"
        }
      },
      "required": [
        "name",
        "description",
        "specUrl",
        "documentationUrl"
      ]
    },
    "ServiceProviderConfigSetting": {
      "description": "Details about feature support for this service provider",
      "properties": {
        "supported": {
          "description": "Whether the feature is supported",
          "type": "boolean"
        }
      }
    },
    "ServiceProviderConfig": {
      "description": "Represents the Service Provider's configuration",
      "properties": {
        "authenticationSchemes": {
          "$ref": "#/definitions/AuthenticationSchemes",
          "description": "Specifies whether the XML data format is supported"
        },
        "bulk": {
          "$ref": "#/definitions/ServiceProviderConfigSetting",
          "description": "Specifies BULK configuration options"
        },
        "changePassword": {
          "$ref": "#/definitions/ServiceProviderConfigSetting",
          "description": "Specifies Change Password configuration options"
        },
        "documentationUrl": {
          "description": "An HTTP addressable URL pointing to the Service Provider's help documentation",
          "type": "string"
        },
        "etag": {
          "$ref": "#/definitions/ServiceProviderConfigSetting",
          "description": "Specifies Etag configuration options"
        },
        "filter": {
          "$ref": "#/definitions/ServiceProviderConfigSetting",
          "description": "Specifies FILTER options"
        },
        "patch": {
          "$ref": "#/definitions/ServiceProviderConfigSetting",
          "description": "Specifies PATCH configuration options"
        },
        "sort": {
          "$ref": "#/definitions/ServiceProviderConfigSetting",
          "description": "Specifies Sort configuration options"
        }
      },
      "required": [
        "documentationUrl",
        "patch",
        "bulk",
        "filter",
        "changePassword",
        "sort",
        "etag",
        "authenticationSchemes"
      ]
    }
  }
}
